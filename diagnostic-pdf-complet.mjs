#!/usr/bin/env node
/**
 * Script de diagnostic complet pour identifier pourquoi le PDF affiche "Non renseign√©"
 * 
 * Usage: node diagnostic-pdf-complet.mjs <feuille_id>
 * Exemple: node diagnostic-pdf-complet.mjs 1
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const feuilleId = process.argv[2] || 1;

console.log('‚îÅ'.repeat(80));
console.log('üîç DIAGNOSTIC COMPLET - DONN√âES PDF');
console.log('‚îÅ'.repeat(80));
console.log(`\nüìã Feuille de route ID: ${feuilleId}\n`);

async function diagnosticComplet() {
  try {
    // 1. R√©cup√©rer la feuille de route avec TOUTES les relations
    console.log('1Ô∏è‚É£  R√©cup√©ration de la feuille de route...\n');
    
    const feuille = await prisma.feuille_route.findUnique({
      where: { feuille_id: parseInt(feuilleId) },
      include: {
        chauffeur: {
          include: {
            utilisateur: true,
            societe_taxi: true
          }
        },
        vehicule: {
          include: {
            societe_taxi: true
          }
        },
        course: { // ‚úÖ SINGULIER - le sch√©ma Prisma utilise 'course' pas 'courses'
          include: {
            client: true,
            mode_paiement: true
          },
          orderBy: { num_ordre: 'asc' }
        },
        charge: { // ‚úÖ SINGULIER - le sch√©ma Prisma utilise 'charge' pas 'charges'
          include: {
            vehicule: true,
            mode_paiement: true
          }
        },
        taximetre: true
      }
    });

    if (!feuille) {
      console.error(`‚ùå Aucune feuille de route trouv√©e avec l'ID ${feuilleId}`);
      return;
    }

    console.log('‚úÖ Feuille de route trouv√©e\n');
    
    // 2. V√©rifier les donn√©es de base
    console.log('‚îÅ'.repeat(80));
    console.log('2Ô∏è‚É£  DONN√âES DE BASE');
    console.log('‚îÅ'.repeat(80));
    console.log(`Date: ${feuille.date_service}`);
    console.log(`Heure d√©but: ${feuille.heure_debut || '‚ùå VIDE'}`);
    console.log(`Heure fin: ${feuille.heure_fin || '‚ùå VIDE'}`);
    console.log(`Statut: ${feuille.statut}`);
    
    // 3. V√©rifier le nom de l'exploitant
    console.log('\n' + '‚îÅ'.repeat(80));
    console.log('3Ô∏è‚É£  NOM DE L\'EXPLOITANT');
    console.log('‚îÅ'.repeat(80));
    
    console.log('\nüì¶ Via Chauffeur:');
    console.log(`  - Chauffeur ID: ${feuille.chauffeur_id}`);
    console.log(`  - Chauffeur existe: ${feuille.chauffeur ? '‚úÖ' : '‚ùå'}`);
    
    if (feuille.chauffeur) {
      console.log(`  - Soci√©t√© ID (chauffeur): ${feuille.chauffeur.societe_id || '‚ùå NULL'}`);
      console.log(`  - Soci√©t√© charg√©e: ${feuille.chauffeur.societe_taxi ? '‚úÖ' : '‚ùå'}`);
      
      if (feuille.chauffeur.societe_taxi) {
        console.log(`  - Nom exploitant: "${feuille.chauffeur.societe_taxi.nom_exploitant || '‚ùå VIDE'}"`);
      } else if (feuille.chauffeur.societe_id) {
        // V√©rifier si la soci√©t√© existe mais n'a pas √©t√© charg√©e
        const societe = await prisma.societe_taxi.findUnique({
          where: { societe_id: feuille.chauffeur.societe_id }
        });
        console.log(`  - Soci√©t√© existe en DB: ${societe ? '‚úÖ' : '‚ùå'}`);
        if (societe) {
          console.log(`  - Nom exploitant (DB): "${societe.nom_exploitant || '‚ùå VIDE'}"`);
        }
      }
    }
    
    console.log('\nüì¶ Via V√©hicule:');
    console.log(`  - V√©hicule ID: ${feuille.vehicule_id}`);
    console.log(`  - V√©hicule existe: ${feuille.vehicule ? '‚úÖ' : '‚ùå'}`);
    
    if (feuille.vehicule) {
      console.log(`  - Soci√©t√© ID (v√©hicule): ${feuille.vehicule.societe_id || '‚ùå NULL'}`);
      console.log(`  - Soci√©t√© charg√©e: ${feuille.vehicule.societe_taxi ? '‚úÖ' : '‚ùå'}`);
      
      if (feuille.vehicule.societe_taxi) {
        console.log(`  - Nom exploitant: "${feuille.vehicule.societe_taxi.nom_exploitant || '‚ùå VIDE'}"`);
      } else if (feuille.vehicule.societe_id) {
        const societe = await prisma.societe_taxi.findUnique({
          where: { societe_id: feuille.vehicule.societe_id }
        });
        console.log(`  - Soci√©t√© existe en DB: ${societe ? '‚úÖ' : '‚ùå'}`);
        if (societe) {
          console.log(`  - Nom exploitant (DB): "${societe.nom_exploitant || '‚ùå VIDE'}"`);
        }
      }
    }
    
    // 4. V√©rifier les heures
    console.log('\n' + '‚îÅ'.repeat(80));
    console.log('4Ô∏è‚É£  HEURES DES PRESTATIONS');
    console.log('‚îÅ'.repeat(80));
    console.log(`Heure d√©but: ${feuille.heure_debut || '‚ùå VIDE'}`);
    console.log(`Heure fin: ${feuille.heure_fin || '‚ùå VIDE'}`);
    
    if (feuille.heure_debut && feuille.heure_fin) {
      try {
        // Les heures peuvent √™tre des objets Date ou des strings
        const formatHeure = (h) => {
          if (h instanceof Date) {
            return `${h.getHours().toString().padStart(2, '0')}:${h.getMinutes().toString().padStart(2, '0')}`;
          }
          return h.toString();
        };
        
        const debutStr = formatHeure(feuille.heure_debut);
        const finStr = formatHeure(feuille.heure_fin);
        
        const debut = debutStr.split(':').map(Number);
        const fin = finStr.split(':').map(Number);
        const debutMinutes = debut[0] * 60 + debut[1];
        const finMinutes = fin[0] * 60 + fin[1];
        const totalMinutes = finMinutes - debutMinutes;
        const heures = Math.floor(totalMinutes / 60);
        const minutes = totalMinutes % 60;
        console.log(`Total calcul√©: ${heures}h${minutes.toString().padStart(2, '0')}`);
      } catch (err) {
        console.log(`‚ö†Ô∏è  Impossible de calculer le total: ${err.message}`);
      }
    } else {
      console.log('‚ùå Impossible de calculer le total (donn√©es manquantes)');
    }
    
    // 5. V√©rifier Index km (Tableau de bord)
    console.log('\n' + '‚îÅ'.repeat(80));
    console.log('5Ô∏è‚É£  INDEX KM - TABLEAU DE BORD');
    console.log('‚îÅ'.repeat(80));
    console.log(`D√©but: ${feuille.index_km_debut_tdb || '‚ùå VIDE'}`);
    console.log(`Fin: ${feuille.index_km_fin_tdb || '‚ùå VIDE'}`);
    
    if (feuille.index_km_debut_tdb && feuille.index_km_fin_tdb) {
      const total = feuille.index_km_fin_tdb - feuille.index_km_debut_tdb;
      console.log(`Total calcul√©: ${total} km`);
    } else {
      console.log('‚ùå Impossible de calculer le total (donn√©es manquantes)');
    }
    
    // 6. V√©rifier les donn√©es du taxim√®tre
    console.log('\n' + '‚îÅ'.repeat(80));
    console.log('6Ô∏è‚É£  DONN√âES TAXIM√àTRE');
    console.log('‚îÅ'.repeat(80));
    
    if (!feuille.taximetre) {
      console.log('‚ùå AUCUNE DONN√âE TAXIM√àTRE DANS LA BASE!');
      console.log('\nüí° Solution SQL:');
      console.log(`INSERT INTO taximetre (feuille_id, pc_debut_tax, pc_fin_tax, index_km_debut_tax, index_km_fin_tax, km_charge_debut, km_charge_fin, chutes_debut_tax, chutes_fin_tax)`);
      console.log(`VALUES (${feuilleId}, 2.40, 2.40, 125000, 125180, 15642.5, 15722.8, 1254.60, 1389.20);`);
    } else {
      console.log('‚úÖ Enregistrement taxim√®tre trouv√©\n');
      
      console.log('üìä Prise en charge:');
      console.log(`  - D√©but: ${feuille.taximetre.pc_debut_tax ?? '‚ùå NULL'}`);
      console.log(`  - Fin: ${feuille.taximetre.pc_fin_tax ?? '‚ùå NULL'}`);
      
      console.log('\nüìä Index Km (Km totaux):');
      console.log(`  - D√©but: ${feuille.taximetre.index_km_debut_tax ?? '‚ùå NULL'}`);
      console.log(`  - Fin: ${feuille.taximetre.index_km_fin_tax ?? '‚ùå NULL'}`);
      if (feuille.taximetre.index_km_debut_tax && feuille.taximetre.index_km_fin_tax) {
        console.log(`  - Total: ${feuille.taximetre.index_km_fin_tax - feuille.taximetre.index_km_debut_tax} km`);
      }
      
      console.log('\nüìä Km en charge:');
      console.log(`  - D√©but: ${feuille.taximetre.km_charge_debut ?? '‚ùå NULL'}`);
      console.log(`  - Fin: ${feuille.taximetre.km_charge_fin ?? '‚ùå NULL'}`);
      if (feuille.taximetre.km_charge_debut && feuille.taximetre.km_charge_fin) {
        console.log(`  - Total: ${(feuille.taximetre.km_charge_fin - feuille.taximetre.km_charge_debut).toFixed(1)} km`);
      }
      
      console.log('\nüìä Chutes (‚Ç¨):');
      console.log(`  - D√©but: ${feuille.taximetre.chutes_debut_tax ?? '‚ùå NULL'}`);
      console.log(`  - Fin: ${feuille.taximetre.chutes_fin_tax ?? '‚ùå NULL'}`);
      if (feuille.taximetre.chutes_debut_tax && feuille.taximetre.chutes_fin_tax) {
        console.log(`  - Total: ${(feuille.taximetre.chutes_fin_tax - feuille.taximetre.chutes_debut_tax).toFixed(2)} ‚Ç¨`);
      }
    }
    
    // 7. V√©rifier les courses
    console.log('\n' + '‚îÅ'.repeat(80));
    console.log('7Ô∏è‚É£  COURSES');
    console.log('‚îÅ'.repeat(80));
    console.log(`Nombre de courses: ${feuille.course?.length || 0}`); // ‚úÖ SINGULIER
    if (feuille.course && feuille.course.length > 0) {
      const totalRecettes = feuille.course.reduce((sum, c) => sum + (Number(c.sommes_percues) || 0), 0);
      console.log(`Total recettes: ${totalRecettes.toFixed(2)} ‚Ç¨`);
    }
    
    // 8. V√©rifier les charges
    console.log('\n' + '‚îÅ'.repeat(80));
    console.log('8Ô∏è‚É£  CHARGES (D√âPENSES)');
    console.log('‚îÅ'.repeat(80));
    console.log(`Nombre de charges: ${feuille.charge?.length || 0}`); // ‚úÖ SINGULIER
    if (feuille.charge && feuille.charge.length > 0) {
      const totalCharges = feuille.charge.reduce((sum, c) => sum + (Number(c.montant) || 0), 0);
      console.log(`Total charges: ${totalCharges.toFixed(2)} ‚Ç¨`);
    }
    
    // 9. R√©sum√© des probl√®mes
    console.log('\n' + '‚îÅ'.repeat(80));
    console.log('9Ô∏è‚É£  R√âSUM√â DES PROBL√àMES D√âTECT√âS');
    console.log('‚îÅ'.repeat(80));
    
    const problemes = [];
    
    if (!feuille.chauffeur?.societe_taxi?.nom_exploitant && !feuille.vehicule?.societe_taxi?.nom_exploitant) {
      problemes.push('‚ùå Nom exploitant manquant (chauffeur ET v√©hicule)');
    }
    
    if (!feuille.heure_debut || !feuille.heure_fin) {
      problemes.push('‚ùå Heures de prestation manquantes');
    }
    
    if (!feuille.index_km_debut_tdb || !feuille.index_km_fin_tdb) {
      problemes.push('‚ùå Index km tableau de bord manquants');
    }
    
    if (!feuille.taximetre) {
      problemes.push('‚ùå Donn√©es taxim√®tre compl√®tement absentes');
    } else {
      if (feuille.taximetre.pc_debut_tax === null || feuille.taximetre.pc_fin_tax === null) {
        problemes.push('‚ö†Ô∏è  Prise en charge taxim√®tre incompl√®te');
      }
      if (feuille.taximetre.index_km_debut_tax === null || feuille.taximetre.index_km_fin_tax === null) {
        problemes.push('‚ö†Ô∏è  Index km taxim√®tre incomplet');
      }
      if (feuille.taximetre.km_charge_debut === null || feuille.taximetre.km_charge_fin === null) {
        problemes.push('‚ö†Ô∏è  Km en charge incomplet');
      }
      if (feuille.taximetre.chutes_debut_tax === null || feuille.taximetre.chutes_fin_tax === null) {
        problemes.push('‚ö†Ô∏è  Chutes incompl√®tes');
      }
    }
    
    if (problemes.length === 0) {
      console.log('‚úÖ Aucun probl√®me d√©tect√© ! Toutes les donn√©es sont pr√©sentes.');
    } else {
      console.log(`\n${problemes.length} probl√®me(s) d√©tect√©(s):\n`);
      problemes.forEach(p => console.log(`  ${p}`));
      
      console.log('\nüí° SOLUTIONS:');
      console.log('\nConsultez le fichier README-DEBUG-PDF.md pour les requ√™tes SQL de correction.');
    }
    
    console.log('\n' + '‚îÅ'.repeat(80));
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors du diagnostic:', error);
  } finally {
    await prisma.$disconnect();
  }
}

diagnosticComplet();
