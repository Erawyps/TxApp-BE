/**
 * Test du Field Mapper pour v√©rifier la transformation des donn√©es
 */

import { PrismaClient } from '@prisma/client';
import { mapFeuilleRouteFromDB } from './src/utils/fieldMapper.js';

const prisma = new PrismaClient();

async function testFieldMapper() {
  try {
    console.log('üß™ Test du Field Mapper\n');
    
    // 1. R√©cup√©rer les donn√©es brutes de la DB
    const feuilleDB = await prisma.feuille_route.findUnique({
      where: { feuille_id: 1 },
      include: {
        chauffeur: {
          include: {
            utilisateur: true,
            societe_taxi: true
          }
        },
        vehicule: {
          include: {
            societe_taxi: true
          }
        },
        course: {
          include: {
            client: true,
            mode_paiement: true
          }
        },
        charge: {
          include: {
            mode_paiement: true
          }
        },
        taximetre: true
      }
    });
    
    console.log('‚úÖ Donn√©es brutes r√©cup√©r√©es\n');
    
    // 2. Appliquer le Field Mapper
    const mapped = mapFeuilleRouteFromDB(feuilleDB);
    
    console.log('‚úÖ Field Mapper appliqu√©\n');
    
    // 3. V√©rifier les champs critiques
    console.log('‚îÅ'.repeat(80));
    console.log('V√âRIFICATION DES CHAMPS MAPP√âS');
    console.log('‚îÅ'.repeat(80));
    
    console.log('\nüìã Nom exploitant:');
    console.log(`  DB brut: ${feuilleDB.chauffeur?.societe_taxi?.nom_exploitant}`);
    console.log(`  Mapp√©: ${mapped.nom_exploitant}`);
    console.log(`  Status: ${mapped.nom_exploitant !== 'Non renseign√©' ? '‚úÖ' : '‚ùå'}`);
    
    console.log('\n‚è∞ Heures:');
    console.log(`  DB heure_debut: ${feuilleDB.heure_debut}`);
    console.log(`  Mapp√© heure_debut: ${mapped.heure_debut}`);
    console.log(`  DB heure_fin: ${feuilleDB.heure_fin}`);
    console.log(`  Mapp√© heure_fin: ${mapped.heure_fin}`);
    
    console.log('\nüìè Index KM (Tableau de bord):');
    console.log(`  DB index_km_debut_tdb: ${feuilleDB.index_km_debut_tdb}`);
    console.log(`  Mapp√© km_tableau_bord_debut: ${mapped.km_tableau_bord_debut}`);
    console.log(`  Mapp√© index_km_debut_tdb: ${mapped.index_km_debut_tdb}`);
    console.log(`  DB index_km_fin_tdb: ${feuilleDB.index_km_fin_tdb}`);
    console.log(`  Mapp√© km_tableau_bord_fin: ${mapped.km_tableau_bord_fin}`);
    console.log(`  Mapp√© index_km_fin_tdb: ${mapped.index_km_fin_tdb}`);
    
    console.log('\nüöñ Taxim√®tre:');
    console.log(`  DB taximetre existe: ${!!feuilleDB.taximetre}`);
    console.log(`  DB pc_debut_tax: ${feuilleDB.taximetre?.pc_debut_tax}`);
    console.log(`  Mapp√© taximetre_prise_charge_debut: ${mapped.taximetre_prise_charge_debut}`);
    console.log(`  Mapp√© taximetre_prise_charge_fin: ${mapped.taximetre_prise_charge_fin}`);
    console.log(`  Mapp√© taximetre_index_km_debut: ${mapped.taximetre_index_km_debut}`);
    console.log(`  Mapp√© taximetre_index_km_fin: ${mapped.taximetre_index_km_fin}`);
    console.log(`  Mapp√© taximetre_km_charge_debut: ${mapped.taximetre_km_charge_debut}`);
    console.log(`  Mapp√© taximetre_km_charge_fin: ${mapped.taximetre_km_charge_fin}`);
    console.log(`  Mapp√© taximetre_chutes_debut: ${mapped.taximetre_chutes_debut}`);
    console.log(`  Mapp√© taximetre_chutes_fin: ${mapped.taximetre_chutes_fin}`);
    
    console.log('\nüë§ Chauffeur:');
    console.log(`  DB chauffeur.utilisateur.prenom: ${feuilleDB.chauffeur?.utilisateur?.prenom}`);
    console.log(`  DB chauffeur.utilisateur.nom: ${feuilleDB.chauffeur?.utilisateur?.nom}`);
    console.log(`  Mapp√© chauffeur: ${mapped.chauffeur ? 'Pr√©sent' : 'Absent'}`);
    
    console.log('\nüìä Courses et Charges:');
    console.log(`  DB course (array): ${Array.isArray(feuilleDB.course)} (${feuilleDB.course?.length || 0} √©l√©ments)`);
    console.log(`  Mapp√© courses (array): ${Array.isArray(mapped.courses)} (${mapped.courses?.length || 0} √©l√©ments)`);
    console.log(`  DB charge (array): ${Array.isArray(feuilleDB.charge)} (${feuilleDB.charge?.length || 0} √©l√©ments)`);
    console.log(`  Mapp√© charges (array): ${Array.isArray(mapped.charges)} (${mapped.charges?.length || 0} √©l√©ments)`);
    
    console.log('\n' + '‚îÅ'.repeat(80));
    console.log('R√âSULTAT');
    console.log('‚îÅ'.repeat(80));
    
    const problemes = [];
    
    if (mapped.nom_exploitant === 'Non renseign√©') {
      problemes.push('‚ùå Nom exploitant = "Non renseign√©"');
    }
    
    if (!mapped.heure_debut || !mapped.heure_fin) {
      problemes.push('‚ùå Heures manquantes');
    }
    
    if (!mapped.km_tableau_bord_debut && !mapped.index_km_debut_tdb) {
      problemes.push('‚ùå Index km d√©but manquant');
    }
    
    if (!mapped.km_tableau_bord_fin && !mapped.index_km_fin_tdb) {
      problemes.push('‚ùå Index km fin manquant');
    }
    
    if (!mapped.taximetre_prise_charge_debut && !mapped.taximetre_prise_charge_fin) {
      problemes.push('‚ùå Prise en charge taxim√®tre manquante');
    }
    
    if (!mapped.taximetre_index_km_debut && !mapped.taximetre_index_km_fin) {
      problemes.push('‚ùå Index km taxim√®tre manquant');
    }
    
    if (problemes.length === 0) {
      console.log('\n‚úÖ Tous les champs sont correctement mapp√©s !');
      console.log('\n‚û°Ô∏è  Le Field Mapper fonctionne correctement.');
      console.log('    Le probl√®me vient probablement de l\'utilisation des donn√©es dans le PDF.');
    } else {
      console.log('\n‚ùå Probl√®mes d√©tect√©s:');
      problemes.forEach(p => console.log(`  ${p}`));
    }
    
    console.log('\n');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testFieldMapper();
