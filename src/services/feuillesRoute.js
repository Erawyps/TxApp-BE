import axios from '../utils/axios.js';

/**
 * Service pour g√©rer les feuilles de route via API dashboard
 */

// Cr√©er une nouvelle feuille de route
export async function createFeuilleRoute(data) {
  try {
    const response = await axios.post('/dashboard/feuilles-route', data);
    return response.data;
  } catch (error) {
    console.error('Erreur lors de la cr√©ation de la feuille de route:', error);
    throw error;
  }
}

// Mettre √† jour une feuille de route
export async function updateFeuilleRoute(id, data) {
  try {
    console.log('üîß updateFeuilleRoute - Service appel√© avec:', { id, data });
    
    // Utiliser l'endpoint dashboard de mise √† jour
    const response = await axios.put(`/dashboard/feuilles-route/${id}`, data);
    
    console.log('‚úÖ updateFeuilleRoute - R√©ponse API:', response.data);
    return response.data;
  } catch (error) {
    console.error('Erreur lors de la mise √† jour de la feuille de route:', error);
    throw error;
  }
}

// Terminer une feuille de route (alias pour updateFeuilleRoute)
export async function endFeuilleRoute(id, data) {
  try {
    console.log('üîß endFeuilleRoute - Service appel√© avec:', { id, data });

    // ‚úÖ CORRECTION: Respecter la valeur de est_validee pass√©e en param√®tre
    // au lieu de la forcer √† true
    const endData = {
      ...data
    };

    return await updateFeuilleRoute(id, endData);
  } catch (error) {
    console.error('Erreur lors de la finalisation de la feuille de route:', error);
    throw error;
  }
}

// R√©cup√©rer la feuille de route active pour un chauffeur (la plus r√©cente)
export async function getActiveFeuilleRoute(chauffeurId) {
  try {
    const response = await axios.get(`/dashboard/feuilles-route/active/${chauffeurId}`);
    const feuilleRoute = response.data;

    if (!feuilleRoute) {
      console.log('üîç getActiveFeuilleRoute - Aucune feuille active trouv√©e pour chauffeur:', chauffeurId);
      return null;
    }

    console.log('‚úÖ getActiveFeuilleRoute - Feuille active trouv√©e:', {
      id: feuilleRoute.feuille_id,
      date: feuilleRoute.date_service,
      chauffeur: feuilleRoute.chauffeur_id,
      est_validee: feuilleRoute.est_validee
    });

    return feuilleRoute;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de la feuille de route active:', error);
    throw error;
  }
}

// R√©cup√©rer l'historique des feuilles de route
export async function getFeuillesRouteHistory(chauffeurId, limit = 10) {
  try {
    const response = await axios.get(`/api/feuilles-route/history/${chauffeurId}?limit=${limit}`);
    return response.data;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de l\'historique:', error);
    throw error;
  }
}
