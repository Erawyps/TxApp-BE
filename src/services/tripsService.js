// Import Dependencies
import axios from '../utils/axios.js';

/**
 * Service pour r√©cup√©rer les donn√©es des courses depuis l'API HTTP
 */
export const tripsService = {
  /**
   * R√©cup√®re la liste des courses avec pagination et filtres
   */
  async getTrips(page = 1, limit = 50, filters = {}) {
    try {
      const params = new URLSearchParams({
        page: page.toString(),
        limit: limit.toString(),
        ...filters
      });

      // Utiliser la route dashboard qui supporte le filtrage par chauffeur
      const response = await axios.get(`/dashboard/courses?${params}`);

      // La route dashboard retourne un format diff√©rent avec .data
      const coursesData = response.data.data || response.data.courses || [];
      const totalCount = response.data.count || coursesData.length;

      return {
        data: coursesData,
        pagination: response.data.pagination || {
          page,
          limit,
          total: totalCount,
          totalPages: Math.ceil(totalCount / limit)
        }
      };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des courses:', error);

      if (error.response) {
        // Erreur de r√©ponse du serveur
        const status = error.response.status;
        const message = error.response.data?.error || error.response.data?.message || 'Erreur serveur';

        switch (status) {
          case 400:
            throw new Error(`Donn√©es invalides: ${message}`);
          case 401:
            throw new Error('Authentification requise pour acc√©der aux courses');
          case 403:
            throw new Error('Acc√®s refus√© aux donn√©es des courses');
          case 404:
            throw new Error('Service de courses non trouv√©');
          case 500:
            throw new Error('Erreur interne du serveur lors de la r√©cup√©ration des courses');
          default:
            throw new Error(`Erreur serveur (${status}): ${message}`);
        }
      } else if (error.request) {
        // Erreur de r√©seau
        throw new Error('Erreur de connexion r√©seau lors de la r√©cup√©ration des courses');
      } else {
        // Erreur inconnue
        throw new Error(`Erreur inattendue: ${error.message}`);
      }
    }
  },

  /**
   * R√©cup√®re les statistiques des courses pour les KPIs
   */
  async getTripsStats(options = {}) {
    const { dateFrom, dateTo, chauffeurId } = options;

    try {
      let url = '/dashboard/courses/stats';
      const params = [];
      if (dateFrom) params.push(`dateFrom=${encodeURIComponent(dateFrom)}`);
      if (dateTo) params.push(`dateTo=${encodeURIComponent(dateTo)}`);
      if (chauffeurId) params.push(`chauffeurId=${chauffeurId}`);
      if (params.length > 0) url += `?${params.join('&')}`;

      console.log('üìä Fetching stats from:', url);
      const response = await axios.get(url);
      console.log('üìä Stats response:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error);
      console.error('‚ùå Error details:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status
      });

      // Gestion sp√©cifique des erreurs
      if (error.response) {
        const status = error.response.status;
        switch (status) {
          case 401:
            throw new Error('Authentification requise pour acc√©der aux statistiques');
          case 403:
            throw new Error('Acc√®s non autoris√© aux statistiques');
          case 404:
            throw new Error('Service de statistiques non trouv√©');
          case 500:
            throw new Error('Erreur lors du calcul des statistiques');
          default:
            throw new Error(`Erreur serveur (${status}) lors de la r√©cup√©ration des statistiques`);
        }
      } else if (error.request) {
        throw new Error('Erreur de connexion r√©seau - impossible de r√©cup√©rer les statistiques');
      } else {
        throw new Error('Erreur inconnue lors de la r√©cup√©ration des statistiques');
      }
    }
  },

  /**
   * R√©cup√®re les donn√©es pour les graphiques
   */
  async getTripsChartData(options = {}) {
    const { dateFrom, dateTo, type = 'daily' } = options;

    try {
      let url = `/dashboard/courses/chart-data?type=${type}`;
      if (dateFrom) url += `&dateFrom=${encodeURIComponent(dateFrom)}`;
      if (dateTo) url += `&dateTo=${encodeURIComponent(dateTo)}`;

      console.log('üìà Fetching chart data from:', url);
      const response = await axios.get(url);
      console.log('üìà Chart response:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des donn√©es de graphique:', error);
      console.error('‚ùå Error details:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status,
        type
      });

      // Gestion sp√©cifique des erreurs
      if (error.response) {
        const status = error.response.status;
        switch (status) {
          case 400:
            throw new Error(`Type de graphique invalide: ${type}`);
          case 401:
            throw new Error('Authentification requise pour acc√©der aux graphiques');
          case 403:
            throw new Error('Acc√®s non autoris√© aux donn√©es de graphiques');
          case 404:
            throw new Error('Service de graphiques non trouv√©');
          case 500:
            throw new Error('Erreur lors du calcul des donn√©es de graphique');
          default:
            throw new Error(`Erreur serveur (${status}) lors de la r√©cup√©ration des graphiques`);
        }
      } else if (error.request) {
        throw new Error('Erreur de connexion r√©seau - impossible de r√©cup√©rer les graphiques');
      } else {
        throw new Error('Erreur inconnue lors de la r√©cup√©ration des donn√©es de graphique');
      }
    }
  }
};