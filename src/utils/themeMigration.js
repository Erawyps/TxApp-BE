// Script de migration pour forcer l'application du nouveau th√®me en production
// √Ä ex√©cuter une seule fois lors du d√©ploiement

import { forceDefaultTheme } from '../utils/themeUtils.js';

/**
 * Force la migration vers le nouveau th√®me par d√©faut (sideblock)
 * Ce script peut √™tre ex√©cut√© c√¥t√© client pour nettoyer les anciens param√®tres
 */
function migrateToSideblockLayout() {
  console.log('üîÑ Migration vers le layout Sideblock...');

  try {
    // V√©rifier les param√®tres actuels
    const currentSettings = localStorage.getItem('settings');

    if (currentSettings) {
      const parsed = JSON.parse(currentSettings);
      console.log('üìã Param√®tres actuels:', parsed);

      if (parsed.themeLayout === 'main-layout') {
        console.log('üîß Migration n√©cessaire: main-layout ‚Üí sideblock');

        // Forcer les nouveaux param√®tres
        const newSettings = forceDefaultTheme();
        console.log('‚úÖ Nouveaux param√®tres appliqu√©s:', newSettings);

        // Recharger la page pour appliquer les changements
        if (confirm('Migration termin√©e ! Voulez-vous recharger la page pour appliquer les changements ?')) {
          window.location.reload();
        }
      } else {
        console.log('‚ÑπÔ∏è Le layout sideblock est d√©j√† appliqu√©');
      }
    } else {
      console.log('‚ÑπÔ∏è Aucun param√®tre trouv√©, les d√©fauts seront appliqu√©s');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
  }
}

// Exposer la fonction globalement pour pouvoir l'appeler depuis la console
if (typeof window !== 'undefined') {
  window.migrateToSideblockLayout = migrateToSideblockLayout;

  // Option: Ex√©cuter automatiquement la migration au chargement
  // migrateToSideblockLayout();
}

export { migrateToSideblockLayout };
