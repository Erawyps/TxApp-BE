import { createClient } from "@supabase/supabase-js";
import { config } from 'dotenv';

// Charger les variables d'environnement
config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Simuler getUserProfile pour tester
async function testGetUserProfile(userId) {
  try {
    console.log(`üß™ Test de r√©cup√©ration du profil utilisateur ${userId}...`);

    // R√©cup√©rer les donn√©es utilisateur
    const { data: userData, error: userError } = await supabase
      .from('utilisateur')
      .select('*')
      .eq('id', userId)
      .single();

    if (userError) {
      throw new Error(`Erreur utilisateur: ${userError.message}`);
    }

    console.log('‚úÖ Donn√©es utilisateur r√©cup√©r√©es');

    let chauffeurData = null;

    // Essayer de r√©cup√©rer les donn√©es chauffeur (si l'utilisateur est un chauffeur)
    if (userData.type_utilisateur === 'CHAUFFEUR') {
      try {
        const { data: chauffeur, error: chauffeurError } = await supabase
          .from('chauffeur')
          .select('id, numero_badge, date_embauche, type_contrat, taux_commission, salaire_base, actif')
          .eq('utilisateur_id', userId)
          .eq('actif', true)
          .maybeSingle();

        if (!chauffeurError && chauffeur) {
          chauffeurData = chauffeur;
          console.log('‚úÖ Donn√©es chauffeur r√©cup√©r√©es');
        } else if (chauffeurError && chauffeurError.code !== 'PGRST116') {
          console.warn('‚ö†Ô∏è Erreur chauffeur (non critique):', chauffeurError.message);
        }
      } catch (chauffeurErr) {
        console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer les donn√©es chauffeur:', chauffeurErr.message);
      }
    }

    // Construire le profil complet
    const userProfile = {
      ...userData,
      chauffeur: chauffeurData,
    };

    console.log('‚úÖ Profil complet construit:', {
      id: userProfile.id,
      nom: userProfile.nom,
      email: userProfile.email,
      type: userProfile.type_utilisateur,
      chauffeur: !!userProfile.chauffeur
    });

    return userProfile;

  } catch (error) {
    console.error('‚ùå Erreur dans testGetUserProfile:', error);
    throw error;
  }
}

// Simuler updateUserProfile pour tester
async function testUpdateUserProfile(userId, updateData) {
  try {
    console.log(`üß™ Test de mise √† jour du profil ${userId}...`);

    const allowedFields = [
      'nom', 'prenom', 'telephone', 'adresse', 'ville',
      'code_postal', 'pays', 'num_bce', 'num_tva',
      'tva_applicable', 'tva_percent', 'email'
    ];

    const dataToUpdate = {};
    allowedFields.forEach(field => {
      if (updateData[field] !== undefined) {
        dataToUpdate[field] = updateData[field];
      }
    });

    dataToUpdate.updated_at = new Date().toISOString();

    const { data, error } = await supabase
      .from('utilisateur')
      .update(dataToUpdate)
      .eq('id', userId)
      .select()
      .single();

    if (error) {
      throw new Error(`Erreur mise √† jour: ${error.message}`);
    }

    const { mot_de_passe: _, reset_token: __, reset_token_expires: ___, ...userWithoutPassword } = data;
    console.log('‚úÖ Mise √† jour r√©ussie');

    return userWithoutPassword;

  } catch (error) {
    console.error('‚ùå Erreur dans testUpdateUserProfile:', error);
    throw error;
  }
}

async function testCompleteFlow() {
  try {
    console.log('üöÄ Test du flux complet de mise √† jour de profil...\n');

    const userId = 244;
    const updateData = {
      nom: 'Test-Update-' + Date.now(),
      email: 'test.updated@example.com',
      telephone: '0987654321'
    };

    // 1. R√©cup√©rer le profil initial
    console.log('1Ô∏è‚É£ R√©cup√©ration du profil initial...');
    const initialProfile = await testGetUserProfile(userId);

    // 2. Mettre √† jour le profil
    console.log('\n2Ô∏è‚É£ Mise √† jour du profil...');
    const updatedUser = await testUpdateUserProfile(userId, updateData);

    // 3. Rafra√Æchir le profil (simuler refreshUserProfile)
    console.log('\n3Ô∏è‚É£ Rafra√Æchissement du profil apr√®s mise √† jour...');
    const refreshedProfile = await testGetUserProfile(userId);

    // 4. V√©rifier que les donn√©es ont √©t√© mises √† jour
    console.log('\n4Ô∏è‚É£ V√©rification des mises √† jour...');
    const emailUpdated = refreshedProfile.email === updateData.email;
    const nomUpdated = refreshedProfile.nom === updateData.nom;
    const telUpdated = refreshedProfile.telephone === updateData.telephone;

    console.log(`üìß Email mis √† jour: ${emailUpdated ? '‚úÖ' : '‚ùå'}`);
    console.log(`üë§ Nom mis √† jour: ${nomUpdated ? '‚úÖ' : '‚ùå'}`);
    console.log(`üìû T√©l√©phone mis √† jour: ${telUpdated ? '‚úÖ' : '‚ùå'}`);

    if (emailUpdated && nomUpdated && telUpdated) {
      console.log('\nüéâ Flux complet r√©ussi ! Les mises √† jour de profil fonctionnent.');
    } else {
      console.log('\n‚ö†Ô∏è Certaines mises √† jour n\'ont pas √©t√© appliqu√©es correctement.');
    }

  } catch (error) {
    console.error('‚ùå Erreur dans le flux complet:', error);
  }
}

testCompleteFlow();