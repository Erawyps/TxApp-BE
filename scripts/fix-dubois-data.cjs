const { PrismaClient } = require('./../prisma/node_modules/.prisma/client');

const prisma = new PrismaClient();

async function fixDuboisData() {
  try {
    console.log('üîß Correction des donn√©es de Fran√ßois-Jos√© Dubois...');

    // 1. R√©cup√©rer l'ID de la r√®gle de salaire "Commission avec Pourboires"
    const salaireRule = await prisma.regle_salaire.findFirst({
      where: {
        nom: 'Commission avec Pourboires'
      }
    });

    if (!salaireRule) {
      console.error('‚ùå R√®gle de salaire "Commission avec Pourboires" non trouv√©e');
      return;
    }

    console.log(`‚úÖ R√®gle de salaire trouv√©e: ${salaireRule.nom} (ID: ${salaireRule.id})`);

    // 2. Mettre √† jour le chauffeur Fran√ßois-Jos√© Dubois avec la r√®gle de salaire
    const chauffeur = await prisma.chauffeur.update({
      where: {
        id: 15
      },
      data: {
        regle_salaire_id: salaireRule.id
      },
      include: {
        utilisateur: {
          select: {
            prenom: true,
            nom: true
          }
        }
      }
    });

    console.log(`‚úÖ Chauffeur mis √† jour: ${chauffeur.utilisateur?.prenom} ${chauffeur.utilisateur?.nom}`);

    // 3. R√©cup√©rer l'ID du v√©hicule "1-ABC-123 Mercedes-Benz E-Class"
    const vehicule = await prisma.vehicule.findFirst({
      where: {
        plaque_immatriculation: '1-ABC-123'
      }
    });

    if (!vehicule) {
      console.error('‚ùå V√©hicule "1-ABC-123" non trouv√©');
      return;
    }

    console.log(`‚úÖ V√©hicule trouv√©: ${vehicule.plaque_immatriculation} ${vehicule.marque} ${vehicule.modele}`);

    // 4. Cr√©er la relation chauffeur-v√©hicule
    const existingRelation = await prisma.chauffeur_vehicule.findFirst({
      where: {
        chauffeur_id: 15,
        vehicule_id: vehicule.id
      }
    });

    if (existingRelation) {
      console.log('‚ÑπÔ∏è La relation chauffeur-v√©hicule existe d√©j√†');
    } else {
      const relation = await prisma.chauffeur_vehicule.create({
        data: {
          chauffeur_id: 15,
          vehicule_id: vehicule.id,
          date_assignation: new Date()
        }
      });
      console.log(`‚úÖ Relation chauffeur-v√©hicule cr√©√©e: ${relation.id}`);
    }

    // 5. V√©rifier les donn√©es finales
    const finalChauffeur = await prisma.chauffeur.findUnique({
      where: { id: 15 },
      include: {
        regle_salaire: true,
        utilisateur: true,
        vehicules: {
          include: {
            vehicule: true
          }
        }
      }
    });

    console.log('\nüìä Donn√©es finales de Fran√ßois-Jos√© Dubois:');
    console.log(`- Nom: ${finalChauffeur.utilisateur?.prenom} ${finalChauffeur.utilisateur?.nom}`);
    console.log(`- R√®gle de salaire: ${finalChauffeur.regle_salaire?.nom || 'Non assign√©e'}`);
    console.log(`- V√©hicules assign√©s: ${finalChauffeur.vehicules.length}`);
    finalChauffeur.vehicules.forEach(cv => {
      console.log(`  - ${cv.vehicule.plaque_immatriculation} ${cv.vehicule.marque} ${cv.vehicule.modele}`);
    });

    console.log('\nüéâ Correction termin√©e avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixDuboisData();