#!/usr/bin/env node

/**
 * Script de test des nouvelles fonctionnalit√©s chauffeur
 * Teste les endpoints: statistiques, sauvegarde automatique, interventions
 */

const axios = require('axios');

// Configuration
const API_BASE = process.env.API_BASE || 'http://localhost:3000/api';
const TEST_CHAUFFEUR_ID = process.env.TEST_CHAUFFEUR_ID || 1;
const AUTH_TOKEN = process.env.AUTH_TOKEN; // Token JWT d'un chauffeur

// Fonction utilitaire pour les requ√™tes API
async function apiRequest(method, endpoint, data = null, token = null) {
  try {
    const config = {
      method,
      url: `${API_BASE}${endpoint}`,
      headers: {
        'Content-Type': 'application/json',
        ...(token && { 'Authorization': `Bearer ${token}` })
      },
      ...(data && { data })
    };

    const response = await axios(config);
    return { success: true, data: response.data, status: response.status };
  } catch (error) {
    return {
      success: false,
      error: error.response?.data || error.message,
      status: error.response?.status
    };
  }
}

// Tests des fonctionnalit√©s
async function runTests() {
  console.log('üß™ D√©marrage des tests des fonctionnalit√©s chauffeur...\n');

  if (!AUTH_TOKEN) {
    console.log('‚ö†Ô∏è  AUTH_TOKEN non d√©fini. Certains tests n√©cessitent une authentification.');
  }

  let passed = 0;
  let failed = 0;

  // Test 1: R√©cup√©ration des statistiques chauffeur
  console.log('üìä Test 1: Statistiques chauffeur');
  const statsResult = await apiRequest('GET', `/chauffeurs/${TEST_CHAUFFEUR_ID}/stats`);
  if (statsResult.success) {
    console.log('‚úÖ Statistiques r√©cup√©r√©es avec succ√®s');
    if (statsResult.data.data?.metriques?.ratio_euro_par_km !== undefined) {
      console.log(`   üìà Ratio ‚Ç¨/km: ${statsResult.data.data.metriques.ratio_euro_par_km}`);
      passed++;
    } else {
      console.log('‚ùå Ratio ‚Ç¨/km manquant dans la r√©ponse');
      failed++;
    }
  } else {
    console.log('‚ùå √âchec r√©cup√©ration statistiques:', statsResult.error);
    failed++;
  }

  // Test 2: Statistiques avec p√©riode
  console.log('\nüìÖ Test 2: Statistiques avec p√©riode');
  const today = new Date().toISOString().split('T')[0];
  const lastMonth = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
  const statsPeriodResult = await apiRequest('GET', `/chauffeurs/${TEST_CHAUFFEUR_ID}/stats?startDate=${lastMonth}&endDate=${today}`);
  if (statsPeriodResult.success) {
    console.log('‚úÖ Statistiques p√©riodiques r√©cup√©r√©es');
    passed++;
  } else {
    console.log('‚ùå √âchec statistiques p√©riodiques:', statsPeriodResult.error);
    failed++;
  }

  // Test 3: Cr√©ation d'une intervention (n√©cessite auth chauffeur)
  if (AUTH_TOKEN) {
    console.log('\nüöî Test 3: Cr√©ation d\'intervention');
    const interventionData = {
      feuille_route_id: 1, // √Ä adapter selon vos donn√©es de test
      type_intervention: 'Police',
      date_heure: new Date().toISOString(),
      lieu: 'Test Location',
      motif: 'Contr√¥le de routine',
      observations: 'Test automatique'
    };

    const interventionResult = await apiRequest('POST', '/interventions', interventionData, AUTH_TOKEN);
    if (interventionResult.success) {
      console.log('‚úÖ Intervention cr√©√©e avec succ√®s');
      passed++;
    } else {
      console.log('‚ùå √âchec cr√©ation intervention:', interventionResult.error);
      failed++;
    }

    // Test 4: R√©cup√©ration des interventions
    console.log('\nüìã Test 4: R√©cup√©ration des interventions');
    const interventionsResult = await apiRequest('GET', `/chauffeurs/${TEST_CHAUFFEUR_ID}/interventions`, null, AUTH_TOKEN);
    if (interventionsResult.success) {
      console.log(`‚úÖ Interventions r√©cup√©r√©es: ${interventionsResult.data.count} trouv√©es`);
      passed++;
    } else {
      console.log('‚ùå √âchec r√©cup√©ration interventions:', interventionsResult.error);
      failed++;
    }

    // Test 5: Sauvegarde automatique d'une course
    console.log('\nüíæ Test 5: Sauvegarde automatique');
    const autoSaveData = {
      numero_ordre: 1,
      index_depart: 1000,
      lieu_embarquement: 'Test Start',
      prix_taximetre: 15.50,
      somme_percue: 18.00
    };

    const autoSaveResult = await apiRequest('PUT', '/courses/1/auto-save', autoSaveData, AUTH_TOKEN); // ID √† adapter
    if (autoSaveResult.success) {
      console.log('‚úÖ Sauvegarde automatique r√©ussie');
      passed++;
    } else {
      console.log('‚ùå √âchec sauvegarde automatique:', autoSaveResult.error);
      failed++;
    }
  } else {
    console.log('\n‚è≠Ô∏è  Tests d\'authentification ignor√©s (AUTH_TOKEN non d√©fini)');
    failed += 3; // On compte comme √©chou√©s les tests n√©cessitant auth
  }

  // Test 6: Validation des calculs de pourboires
  console.log('\nüßÆ Test 6: Validation calculs pourboires');
  // Ce test n√©cessiterait de cr√©er/modifier une course et v√©rifier le calcul
  console.log('‚ÑπÔ∏è  Test manuel requis: cr√©er une course et v√©rifier que pourboire = somme_percue - prix_taximetre');

  // R√©sum√©
  console.log('\n' + '='.repeat(50));
  console.log('üìä R√âSULTATS DES TESTS');
  console.log('='.repeat(50));
  console.log(`‚úÖ Tests r√©ussis: ${passed}`);
  console.log(`‚ùå Tests √©chou√©s: ${failed}`);
  console.log(`üìà Taux de r√©ussite: ${passed + failed > 0 ? Math.round((passed / (passed + failed)) * 100) : 0}%`);

  if (failed === 0) {
    console.log('\nüéâ Tous les tests sont pass√©s! Les fonctionnalit√©s chauffeur sont op√©rationnelles.');
  } else {
    console.log('\n‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les logs ci-dessus.');
  }

  console.log('\nüí° Pour ex√©cuter ce script:');
  console.log('   AUTH_TOKEN=your_jwt_token TEST_CHAUFFEUR_ID=1 node scripts/test-chauffeur-features.js');
}

// Ex√©cution des tests
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = { runTests };