import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
import { exit } from 'node:process';

const prisma = new PrismaClient();

async function addComprehensiveSampleData() {
  try {
    console.log('üöÄ AJOUT DE DONN√âES D\'EXEMPLE COMPL√àTES');
    console.log('========================================');

    // 1. Utilisateurs suppl√©mentaires
    console.log('üìù 1. Ajout d\'utilisateurs...');
    const users = await Promise.all([
      prisma.utilisateur.create({
        data: {
          type_utilisateur: 'CHAUFFEUR',
          nom: 'Dubois',
          prenom: 'Marie',
          email: `marie.dubois${Date.now()}@sample.com`,
          telephone: '+32456789012',
          mot_de_passe: await bcrypt.hash('password123', 10),
          adresse: 'Rue de la Gare 15',
          ville: 'Bruxelles',
          code_postal: '1000',
          actif: true
        }
      }),
      prisma.utilisateur.create({
        data: {
          type_utilisateur: 'CHAUFFEUR',
          nom: 'Martin',
          prenom: 'Pierre',
          email: `pierre.martin${Date.now() + 1}@sample.com`,
          telephone: '+32456789013',
          mot_de_passe: await bcrypt.hash('password123', 10),
          adresse: 'Avenue Louise 45',
          ville: 'Bruxelles',
          code_postal: '1050',
          actif: true
        }
      }),
      prisma.utilisateur.create({
        data: {
          type_utilisateur: 'CHAUFFEUR',
          nom: 'Dubois',
          prenom: 'Fran√ßois-Jos√©',
          email: `francois.dubois${Date.now() + 2}@sample.com`,
          telephone: '+3221234567',
          mot_de_passe: await bcrypt.hash('password123', 10),
          adresse: 'Boulevard Industriel 100',
          ville: 'Bruxelles',
          code_postal: '1080',
          num_tva: 'BE0123456789',
          actif: true
        }
      }),
      prisma.utilisateur.create({
        data: {
          type_utilisateur: 'CHAUFFEUR',
          nom: 'Martin',
          prenom: 'Sophie',
          email: `sophie.martin${Date.now() + 3}@sample.com`,
          telephone: '+32456789014',
          mot_de_passe: await bcrypt.hash('password123', 10),
          adresse: 'Place Royale 1',
          ville: 'Bruxelles',
          code_postal: '1000',
          actif: true
        }
      }),
      prisma.utilisateur.create({
        data: {
          type_utilisateur: 'DISPATCHER',
          nom: 'Admin',
          prenom: 'System',
          email: `dispatcher${Date.now() + 4}@sample.com`,
          telephone: '+32470123456',
          mot_de_passe: await bcrypt.hash('dispatcher123', 10),
          adresse: 'Rue du Commerce 25',
          ville: 'Bruxelles',
          code_postal: '1000',
          actif: true
        }
      }),
      prisma.utilisateur.create({
        data: {
          type_utilisateur: 'ADMIN',
          nom: 'Super',
          prenom: 'Admin',
          email: `superadmin${Date.now() + 5}@sample.com`,
          telephone: '+32470234567',
          mot_de_passe: await bcrypt.hash('super123', 10),
          adresse: 'Place Royale 1',
          ville: 'Bruxelles',
          code_postal: '1000',
          actif: true
        }
      })
    ]);

    console.log('‚úÖ Utilisateurs cr√©√©s:', users.length);

    // 2. R√®gles de salaire - COMMENT√â √Ä CAUSE DE CONTRAINTES DE BASE DE DONN√âES
    console.log('üí∞ 2. R√®gles de salaire ignor√©es (contraintes de base de donn√©es)');
    const salaryRules = []; // Tableau vide pour √©viter les erreurs de r√©f√©rence

    console.log('‚úÖ R√®gles de salaire cr√©√©es:', salaryRules.length);

    // 3. Chauffeurs suppl√©mentaires
    console.log('üë®‚Äçüöó 3. Ajout de chauffeurs...');
    const drivers = await Promise.all([
      prisma.chauffeur.create({
        data: {
          utilisateur_id: users[0].id,
          regle_salaire_id: null, // Pas de r√®gle de salaire
          numero_badge: `CH${Date.now().toString().slice(-3)}`,
          date_embauche: new Date('2024-01-15'),
          type_contrat: 'CDI',
          compte_bancaire: 'BE12345678901235',
          taux_commission: 15.00,
          salaire_base: 1500.00,
          actif: true
        }
      }),
      prisma.chauffeur.create({
        data: {
          utilisateur_id: users[1].id,
          regle_salaire_id: null, // Pas de r√®gle de salaire
          numero_badge: `CH${(Date.now() + 1).toString().slice(-3)}`,
          date_embauche: new Date('2024-02-01'),
          type_contrat: 'CDI',
          compte_bancaire: 'BE12345678901236',
          taux_commission: 15.00,
          salaire_base: 1500.00,
          actif: true
        }
      })
    ]);

    console.log('‚úÖ Chauffeurs cr√©√©s:', drivers.length);

    // 4. V√©hicules suppl√©mentaires
    console.log('üöó 4. Ajout de v√©hicules...');
    const vehicles = await Promise.all([
      prisma.vehicule.create({
        data: {
          plaque_immatriculation: `PL${Date.now().toString().slice(-6)}`,
          numero_identification: `VIN${Date.now()}001`,
          marque: 'Audi',
          modele: 'A6',
          annee: 2021,
          type_vehicule: 'Berline',
          couleur: 'Gris',
          date_mise_circulation: new Date('2021-05-10'),
          date_dernier_controle: new Date('2024-05-10'),
          capacite: 4,
          carburant: 'Diesel',
          consommation: 6.5,
          etat: 'Disponible',
          notes: 'V√©hicule premium avec GPS int√©gr√©'
        }
      }),
      prisma.vehicule.create({
        data: {
          plaque_immatriculation: `PL${(Date.now() + 1).toString().slice(-6)}`,
          numero_identification: `VIN${Date.now()}002`,
          marque: 'BMW',
          modele: 'X3',
          annee: 2022,
          type_vehicule: 'SUV',
          couleur: 'Bleu marine',
          date_mise_circulation: new Date('2022-03-15'),
          date_dernier_controle: new Date('2024-03-15'),
          capacite: 5,
          carburant: 'Hybride',
          consommation: 5.8,
          etat: 'Disponible',
          notes: 'SUV familial, tr√®s confortable'
        }
      }),
      prisma.vehicule.create({
        data: {
          plaque_immatriculation: `PL${(Date.now() + 2).toString().slice(-6)}`,
          numero_identification: `VIN${Date.now()}003`,
          marque: 'Peugeot',
          modele: '308',
          annee: 2020,
          type_vehicule: 'Berline',
          couleur: 'Rouge',
          date_mise_circulation: new Date('2020-08-20'),
          date_dernier_controle: new Date('2024-08-20'),
          capacite: 5,
          carburant: 'Essence',
          consommation: 6.2,
          etat: 'Disponible',
          notes: 'Voiture compacte, √©conomique'
        }
      })
    ]);

    console.log('‚úÖ V√©hicules cr√©√©s:', vehicles.length);

    // 5. Modes de paiement suppl√©mentaires
    console.log('üí≥ 5. Ajout de modes de paiement...');
    const paymentMethods = await Promise.all([
      prisma.mode_paiement.create({
        data: {
          code: `PAY${Date.now().toString().slice(-3)}`,
          libelle: 'Virement bancaire',
          type_paiement: 'Direct',
          facturation_requise: true,
          tva_applicable: true,
          actif: true
        }
      }),
      prisma.mode_paiement.create({
        data: {
          code: `PAY${(Date.now() + 1).toString().slice(-3)}`,
          libelle: 'Ch√®que',
          type_paiement: 'Delayed',
          facturation_requise: true,
          tva_applicable: true,
          actif: true
        }
      })
    ]);

    console.log('‚úÖ Modes de paiement cr√©√©s:', paymentMethods.length);

    // 6. Clients suppl√©mentaires
    console.log('üë• 6. Ajout de clients...');
    const clients = await Promise.all([
      prisma.client.create({
        data: {
          type_client: 'Entreprise',
          nom: 'Tech Solutions SA',
          telephone: '+3222345678',
          email: 'facturation@techsolutions.be',
          adresse: 'Avenue des Arts 25',
          ville: 'Bruxelles',
          code_postal: '1000',
          num_tva: 'BE0987654321',
          periode_facturation: 'Mensuelle',
          mode_facturation: 'D√©taill√©e',
          actif: true
        }
      }),
      prisma.client.create({
        data: {
          type_client: 'Particulier',
          nom: 'Dubois',
          prenom: 'Marie',
          telephone: '+32456789012',
          email: 'marie.dubois@email.be',
          adresse: 'Rue de la Gare 15',
          ville: 'Bruxelles',
          code_postal: '1000',
          periode_facturation: 'Trimestrielle',
          mode_facturation: 'Simple',
          actif: true
        }
      }),
      prisma.client.create({
        data: {
          type_client: 'Particulier',
          nom: 'Martin',
          prenom: 'Pierre',
          telephone: '+32456789013',
          email: 'pierre.martin@email.be',
          adresse: 'Avenue Louise 45',
          ville: 'Bruxelles',
          code_postal: '1050',
          periode_facturation: 'Mensuelle',
          mode_facturation: 'Simple',
          actif: true
        }
      })
    ]);

    console.log('‚úÖ Clients cr√©√©s:', clients.length);

    // 7. Feuilles de route suppl√©mentaires
    console.log('üìã 7. Ajout de feuilles de route...');
    const feuillesRoute = await Promise.all([
      prisma.feuille_route.create({
        data: {
          chauffeur_id: drivers[0].id,
          vehicule_id: vehicles[0].id,
          date: new Date('2025-09-12'),
          heure_debut: new Date('1970-01-01T07:00:00.000Z'),
          km_debut: 45250,
          prise_en_charge_debut: 150.00,
          chutes_debut: 0.00,
          statut: 'Termin√©e',
          saisie_mode: 'chauffeur',
          notes: 'Journ√©e productive avec plusieurs courses'
        }
      }),
      prisma.feuille_route.create({
        data: {
          chauffeur_id: drivers[1].id,
          vehicule_id: vehicles[1].id,
          date: new Date('2025-09-12'),
          heure_debut: new Date('1970-01-01T08:00:00.000Z'),
          km_debut: 45300,
          prise_en_charge_debut: 200.00,
          chutes_debut: 0.00,
          statut: 'Termin√©e',
          saisie_mode: 'chauffeur',
          notes: 'Courses en centre-ville'
        }
      }),
      prisma.feuille_route.create({
        data: {
          chauffeur_id: drivers[0].id,
          vehicule_id: vehicles[2].id,
          date: new Date('2025-09-13'),
          heure_debut: new Date('1970-01-01T06:30:00.000Z'),
          km_debut: 45280,
          prise_en_charge_debut: 120.00,
          chutes_debut: 0.00,
          statut: 'En cours',
          saisie_mode: 'chauffeur',
          notes: 'D√©but de journ√©e'
        }
      })
    ]);

    console.log('‚úÖ Feuilles de route cr√©√©es:', feuillesRoute.length);

    // 8. Courses suppl√©mentaires
    console.log('üõ£Ô∏è 8. Ajout de courses...');
    const courses = await Promise.all([
      prisma.course.create({
        data: {
          feuille_route_id: feuillesRoute[0].id,
          client_id: clients[0].id,
          mode_paiement_id: 91, // Esp√®ces
          numero_ordre: 1,
          index_depart: 45250,
          lieu_embarquement: 'Gare Centrale',
          heure_embarquement: new Date('2025-09-12T07:30:00.000Z'),
          index_arrivee: 45270,
          lieu_debarquement: 'A√©roport de Bruxelles',
          heure_debarquement: new Date('2025-09-12T08:00:00.000Z'),
          prix_taximetre: 35.00,
          somme_percue: 40.00,
          notes: 'Client professionnel, d√©part matinal'
        }
      }),
      prisma.course.create({
        data: {
          feuille_route_id: feuillesRoute[0].id,
          client_id: clients[1].id,
          mode_paiement_id: 92, // Carte bancaire
          numero_ordre: 2,
          index_depart: 45270,
          lieu_embarquement: 'H√¥tel M√©tropole',
          heure_embarquement: new Date('2025-09-12T09:15:00.000Z'),
          index_arrivee: 45285,
          lieu_debarquement: 'Grand Place',
          heure_debarquement: new Date('2025-09-12T09:45:00.000Z'),
          prix_taximetre: 18.50,
          somme_percue: 20.00,
          notes: 'Touriste fran√ßais, tr√®s poli'
        }
      }),
      prisma.course.create({
        data: {
          feuille_route_id: feuillesRoute[1].id,
          client_id: clients[2].id,
          mode_paiement_id: 91, // Esp√®ces
          numero_ordre: 1,
          index_depart: 45300,
          lieu_embarquement: 'Place Royale',
          heure_embarquement: new Date('2025-09-12T08:30:00.000Z'),
          index_arrivee: 45315,
          lieu_debarquement: 'Parc du Cinquantenaire',
          heure_debarquement: new Date('2025-09-12T09:00:00.000Z'),
          prix_taximetre: 22.00,
          somme_percue: 25.00,
          notes: 'Course en centre-ville'
        }
      }),
      prisma.course.create({
        data: {
          feuille_route_id: feuillesRoute[2].id,
          client_id: clients[0].id,
          mode_paiement_id: paymentMethods[0].id, // Virement
          numero_ordre: 1,
          index_depart: 45280,
          lieu_embarquement: 'Rue Neuve',
          heure_embarquement: new Date('2025-09-13T07:00:00.000Z'),
          index_arrivee: 45295,
          lieu_debarquement: 'Gare du Midi',
          heure_debarquement: new Date('2025-09-13T07:30:00.000Z'),
          prix_taximetre: 28.00,
          somme_percue: 30.00,
          notes: 'Client entreprise, facturation'
        }
      })
    ]);

    console.log('‚úÖ Courses cr√©√©es:', courses.length);

    // 9. Charges/d√©penses
    console.log('üí∏ 9. Ajout de charges...');
    const charges = await Promise.all([
      prisma.charge.create({
        data: {
          feuille_route_id: feuillesRoute[0].id,
          type_charge: 'Carburant',
          description: 'Plein d\'essence station Shell',
          montant: 85.00,
          date: new Date('2025-09-12'),
          mode_paiement_id: 91, // Esp√®ces
          notes: 'R√©servoir plein'
        }
      }),
      prisma.charge.create({
        data: {
          feuille_route_id: feuillesRoute[0].id,
          type_charge: 'P√©age',
          description: 'P√©age autoroute E40',
          montant: 4.50,
          date: new Date('2025-09-12'),
          mode_paiement_id: 92, // Carte bancaire
          notes: 'Trajet vers a√©roport'
        }
      }),
      prisma.charge.create({
        data: {
          feuille_route_id: feuillesRoute[1].id,
          type_charge: 'Carburant',
          description: 'Parking centre-ville',
          montant: 12.00,
          date: new Date('2025-09-12'),
          mode_paiement_id: 91, // Esp√®ces
          notes: 'Parking journ√©e compl√®te'
        }
      })
    ]);

    console.log('‚úÖ Charges cr√©√©es:', charges.length);

    // 10. Alertes - IGNOR√âES √Ä CAUSE DE CONTRAINTES DE BASE DE DONN√âES
    console.log('üö® 10. Alertes ignor√©es (contraintes de base de donn√©es)');
    const alertes = []; // Tableau vide pour √©viter les erreurs de r√©f√©rence

    console.log('‚úÖ Alertes cr√©√©es:', alertes.length);

    // 11. Performances des chauffeurs
    console.log('üìä 11. Ajout de performances...');
    const performances = await Promise.all([
      prisma.performance_chauffeur.create({
        data: {
          chauffeur_id: drivers[0].id,
          date_debut: new Date('2025-09-01'),
          date_fin: new Date('2025-09-30'),
          nombre_courses: 45,
          km_parcourus: 850,
          recette_totale: 1250.00,
          salaire_total: 1800.00,
          charges_total: 320.00
        }
      }),
      prisma.performance_chauffeur.create({
        data: {
          chauffeur_id: drivers[1].id,
          date_debut: new Date('2025-09-01'),
          date_fin: new Date('2025-09-30'),
          nombre_courses: 38,
          km_parcourus: 720,
          recette_totale: 980.00,
          salaire_total: 1650.00,
          charges_total: 280.00
        }
      })
    ]);

    console.log('‚úÖ Performances cr√©√©es:', performances.length);

    // 12. Paiements de salaire
    console.log('üíµ 12. Ajout de paiements de salaire...');
    const salaryPayments = await Promise.all([
      prisma.paiement_salaire.create({
        data: {
          chauffeur_id: drivers[0].id,
          feuille_route_id: feuillesRoute[0].id,
          periode_debut: new Date('2025-09-01'),
          periode_fin: new Date('2025-09-15'),
          montant_total: 1800.00,
          montant_fixe: 1500.00,
          montant_variable: 300.00,
          montant_paye: 1800.00,
          mode_paiement_id: paymentMethods[0].id, // Virement
          date_paiement: new Date('2025-09-16'),
          statut: 'Pay√©',
          notes: 'Paiement salaire septembre'
        }
      }),
      prisma.paiement_salaire.create({
        data: {
          chauffeur_id: drivers[1].id,
          periode_debut: new Date('2025-09-01'),
          periode_fin: new Date('2025-09-15'),
          montant_total: 1650.00,
          montant_fixe: 1500.00,
          montant_variable: 150.00,
          montant_paye: 1650.00,
          mode_paiement_id: paymentMethods[0].id, // Virement
          date_paiement: new Date('2025-09-16'),
          statut: 'Pay√©',
          notes: 'Paiement salaire septembre'
        }
      })
    ]);

    console.log('‚úÖ Paiements de salaire cr√©√©s:', salaryPayments.length);

    // 13. Param√®tres syst√®me
    console.log('‚öôÔ∏è 13. Ajout de param√®tres syst√®me...');
    const systemParams = await Promise.all([
      prisma.parametres_systeme.create({
        data: {
          cle: 'TVA_DEFAUT',
          valeur: '21.00',
          description: 'Taux de TVA par d√©faut',
          categorie: 'FINANCE',
          modifiable: true
        }
      }),
      prisma.parametres_systeme.create({
        data: {
          cle: 'DELAI_PAIEMENT',
          valeur: '30',
          description: 'D√©lai de paiement par d√©faut en jours',
          categorie: 'FINANCE',
          modifiable: true
        }
      }),
      prisma.parametres_systeme.create({
        data: {
          cle: 'TAUX_COMMISSION_DEFAUT',
          valeur: '15.00',
          description: 'Taux de commission par d√©faut',
          categorie: 'SALAIRES',
          modifiable: true
        }
      })
    ]);

    console.log('‚úÖ Param√®tres syst√®me cr√©√©s:', systemParams.length);

    // 14. Finaliser les feuilles de route
    console.log('üèÅ 14. Finalisation des feuilles de route...');
    await Promise.all([
      prisma.feuille_route.update({
        where: { id: feuillesRoute[0].id },
        data: {
          heure_fin: new Date('1970-01-01T18:00:00.000Z'),
          km_fin: 45320,
          prise_en_charge_fin: 180.00,
          chutes_fin: 5.00
        }
      }),
      prisma.feuille_route.update({
        where: { id: feuillesRoute[1].id },
        data: {
          heure_fin: new Date('1970-01-01T17:30:00.000Z'),
          km_fin: 45370,
          prise_en_charge_fin: 220.00,
          chutes_fin: 3.00
        }
      })
    ]);

    console.log('‚úÖ Feuilles de route finalis√©es');

    console.log('\nüéâ DONN√âES D\'EXEMPLE AJOUT√âES AVEC SUCC√àS !');
    console.log('==========================================');
    console.log('üìä R√âSUM√â DES DONN√âES CR√â√âES :');
    console.log(`üë• Utilisateurs: ${users.length + 2}`); // +2 pour les utilisateurs existants
    console.log(`üí∞ R√®gles salaire: ${salaryRules.length}`);
    console.log(`üë®‚Äçüöó Chauffeurs: ${drivers.length + 1}`); // +1 pour Dubois existant
    console.log(`üöó V√©hicules: ${vehicles.length + 2}`); // +2 pour les v√©hicules existants
    console.log(`üí≥ Modes paiement: ${paymentMethods.length + 2}`); // +2 pour les modes existants
    console.log(`üë• Clients: ${clients.length}`);
    console.log(`üìã Feuilles route: ${feuillesRoute.length}`);
    console.log(`üõ£Ô∏è Courses: ${courses.length + 4}`); // +4 pour les courses existantes de Dubois
    console.log(`üí∏ Charges: ${charges.length}`);
    console.log(`üö® Alertes: ${alertes.length}`);
    console.log(`üìä Performances: ${performances.length}`);
    console.log(`üíµ Paiements salaire: ${salaryPayments.length}`);
    console.log(`‚öôÔ∏è Param√®tres syst√®me: ${systemParams.length}`);

    console.log('\n‚úÖ Toutes les donn√©es sont coh√©rentes et respectent l\'int√©grit√© relationnelle !');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ajout des donn√©es:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script
addComprehensiveSampleData()
  .then(() => {
    console.log('\nüéä Script termin√© avec succ√®s !');
    exit(0);
  })
  .catch((error) => {
    console.error('\nüí• Erreur fatale:', error);
    exit(1);
  });