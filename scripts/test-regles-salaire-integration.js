#!/usr/bin/env node

/**
 * Script de test pour v√©rifier l'int√©gration des r√®gles de salaire
 * dans le syst√®me new-post-form
 */

// Utilisation de l'API fetch native de Node.js

const API_BASE_URL = 'http://localhost:3001/api';

async function testReglesSalaireAPI() {
  console.log('üß™ Test des r√®gles de salaire API\n');

  try {
    // Test 1: R√©cup√©ration de toutes les r√®gles de salaire
    console.log('üì° Test 1: R√©cup√©ration des r√®gles de salaire...');
    const response = await fetch(`${API_BASE_URL}/regles-salaire`);
    const data = await response.json();

    if (response.ok) {
      console.log('‚úÖ API r√®gles de salaire fonctionnelle');
      console.log(`üìä ${data.data?.length || 0} r√®gles trouv√©es:`);

      if (data.data && data.data.length > 0) {
        data.data.forEach((regle, index) => {
          console.log(`  ${index + 1}. ${regle.nom} (${regle.type_regle})`);
        });
      } else {
        console.log('‚ö†Ô∏è Aucune r√®gle de salaire trouv√©e dans la base de donn√©es');
      }
    } else {
      console.log('‚ùå Erreur API:', response.status, data.error);
    }

    // Test 2: R√©cup√©ration d'une r√®gle sp√©cifique (si disponible)
    if (data.data && data.data.length > 0) {
      const firstRegle = data.data[0];
      console.log(`\nüì° Test 2: R√©cup√©ration de la r√®gle "${firstRegle.nom}"...`);

      const detailResponse = await fetch(`${API_BASE_URL}/regles-salaire/${firstRegle.id}`);
      const detailData = await detailResponse.json();

      if (detailResponse.ok) {
        console.log('‚úÖ D√©tail de la r√®gle r√©cup√©r√©:');
        console.log(`  - Nom: ${detailData.nom}`);
        console.log(`  - Type: ${detailData.type_regle}`);
        console.log(`  - Description: ${detailData.description || 'N/A'}`);
        console.log(`  - Actif: ${detailData.actif ? 'Oui' : 'Non'}`);
      } else {
        console.log('‚ùå Erreur r√©cup√©ration d√©tail:', detailResponse.status, detailData.error);
      }
    }

    // Test 3: V√©rification de la coh√©rence des donn√©es
    console.log('\nüì° Test 3: V√©rification de la coh√©rence des donn√©es...');
    const typesUniques = [...new Set(data.data?.map(r => r.type_regle) || [])];
    console.log(`üìä Types de r√®gles trouv√©s: ${typesUniques.join(', ')}`);

    const reglesActives = data.data?.filter(r => r.actif) || [];
    console.log(`üìä R√®gles actives: ${reglesActives.length}/${data.data?.length || 0}`);

  } catch (error) {
    console.error('üí• Erreur lors des tests:', error.message);
  }
}

async function testFrontendIntegration() {
  console.log('\nüñ•Ô∏è Test de l\'int√©gration frontend\n');

  try {
    // Test de r√©cup√©ration des r√®gles format√©es pour dropdown
    console.log('üì° Test: R√©cup√©ration des r√®gles format√©es pour dropdown...');

    // Simuler l'appel au service frontend
    const response = await fetch(`${API_BASE_URL}/regles-salaire`);
    const data = await response.json();

    if (response.ok && data.data) {
      const formattedRules = data.data.map(regle => ({
        value: regle.id,
        label: `${regle.nom} - ${regle.type_regle}`,
        description: regle.description,
        type: regle.type_regle,
        parametres: regle.parametres
      }));

      console.log('‚úÖ R√®gles format√©es pour dropdown:');
      formattedRules.slice(0, 3).forEach((rule, index) => {
        console.log(`  ${index + 1}. ${rule.label}`);
      });

      if (formattedRules.length > 3) {
        console.log(`  ... et ${formattedRules.length - 3} autres`);
      }
    } else {
      console.log('‚ùå Impossible de r√©cup√©rer les r√®gles pour le dropdown');
    }

  } catch (error) {
    console.error('üí• Erreur test frontend:', error.message);
  }
}

async function main() {
  console.log('üöÄ D√©marrage des tests d\'int√©gration des r√®gles de salaire\n');

  // V√©rifier que le serveur est accessible
  try {
    const healthCheck = await fetch(`${API_BASE_URL}/chauffeurs`);
    if (!healthCheck.ok) {
      console.log('‚ö†Ô∏è Le serveur API ne semble pas accessible sur localhost:3001');
      console.log('Assurez-vous que le serveur est d√©marr√© avec: npm run dev');
      return;
    }
  } catch (error) {
    console.log('‚ùå Impossible de contacter le serveur API');
    console.log('V√©rifiez que le serveur est d√©marr√© sur le port 3001');
    return;
  }

  await testReglesSalaireAPI();
  await testFrontendIntegration();

  console.log('\n‚ú® Tests termin√©s!');
  console.log('\nüìã R√©sum√©:');
  console.log('- API des r√®gles de salaire ajout√©e et fonctionnelle');
  console.log('- Service frontend cr√©√© pour r√©cup√©rer les r√®gles');
  console.log('- Int√©gration dans le composant ShiftForm effectu√©e');
  console.log('- Dropdown "Type de r√©mun√©ration" utilise maintenant les donn√©es de la base');
}

// Ex√©cuter les tests
main().catch(console.error);