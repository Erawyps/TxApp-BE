// Simuler l'environnement Vite pour les tests
globalThis.import = { meta: { env: { VITE_API_URL: 'http://localhost:3001/api', PROD: false } } };

// Simuler fetch pour les tests
globalThis.fetch = (await import('node-fetch')).default;

import { getReglesSalaireForDropdown } from '../src/services/reglesSalaire.js';
import { getVehicules } from '../src/services/vehicules.js';

console.log('üß™ Test des services frontend avec simulation compl√®te...');

async function testFrontendServices() {
  try {
    console.log('üìä Test des r√®gles de salaire...');
    const regles = await getReglesSalaireForDropdown();
    console.log('‚úÖ R√®gles de salaire r√©cup√©r√©es:', regles?.length || 0);
    if (regles && regles.length > 0) {
      console.log('üìã √âchantillon:', regles.slice(0, 2));
    }

    console.log('üöó Test des v√©hicules...');
    const vehiculesResponse = await getVehicules();
    const vehicules = vehiculesResponse?.data || [];
    console.log('‚úÖ V√©hicules r√©cup√©r√©s:', vehicules?.length || 0);
    if (vehicules && vehicules.length > 0) {
      console.log('üìã √âchantillon:', vehicules.slice(0, 2).map(v => ({ id: v.id, plaque: v.plaque_immatriculation, marque: v.marque })));
    }

    console.log('üéâ Tests termin√©s avec succ√®s !');

    // Test des formats attendus par les composants
    console.log('\nüîç Test des formats pour les composants:');

    // Format pour ShiftForm (v√©hicules)
    const vehicleOptions = vehicules.length > 0
      ? vehicules.map(v => ({
          value: v.id,
          label: `${v.plaque_immatriculation} - ${v.marque} ${v.modele}`
        }))
      : [];
    console.log('üöó Options v√©hicules pour ShiftForm:', vehicleOptions.length);

    // Format pour les r√®gles de salaire
    const remunerationOptions = regles.length > 0
      ? [{ value: '', label: 'S√©lectionner un type de r√©mun√©ration' }, ...regles]
      : [{ value: '', label: 'Chargement des types...' }];
    console.log('üí∞ Options r√©mun√©ration pour ShiftForm:', remunerationOptions.length);

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
    console.error('Stack:', error.stack);
  }
}

testFrontendServices();