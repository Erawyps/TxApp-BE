// Script pour cr√©er un utilisateur de test
// Ex√©cuter avec: node scripts/create-test-user.js

import { createClient } from '@supabase/supabase-js';
import bcrypt from 'bcryptjs';

const supabaseUrl = "https://jfrhzwtkfotsrjkacrns.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impmcmh6d3RrZm90c3Jqa2Fjcm5zIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkxMzc2NTMsImV4cCI6MjA2NDcxMzY1M30.wmECv2qWzI076PcUKj0JjKuTOTS3Hb3uoENeDpSNuFU";

const supabase = createClient(supabaseUrl, supabaseKey);

async function createTestUser() {
  try {
    console.log("üîç Tentative de cr√©ation d'un utilisateur de test...");

    const email = "admin@taxi.be";
    const password = "password123";
    const hashedPassword = await bcrypt.hash(password, 12);

    // Essayer d'abord de v√©rifier si l'utilisateur existe d√©j√†
    console.log("1. V√©rification de l'existence de l'utilisateur...");
    try {
      const { data: existing, error: checkError } = await supabase
        .from('utilisateur')
        .select('id')
        .eq('email', email)
        .maybeSingle();

      if (!checkError && existing) {
        console.log('‚úÖ Utilisateur de test existe d√©j√†');
        console.log('üìß Email:', email);
        console.log('üîë Mot de passe:', password);
        return;
      }
    } catch (checkErr) {
      console.log("‚ö†Ô∏è Impossible de v√©rifier l'existence (normal si RLS est activ√©)");
    }

    // Cr√©er l'utilisateur de test
    console.log("2. Cr√©ation de l'utilisateur de test...");
    const { data, error } = await supabase
      .from('utilisateur')
      .insert([
        {
          email,
          mot_de_passe: hashedPassword,
          nom: "Admin",
          prenom: "Syst√®me",
          telephone: "+32 123 456 789",
          type_utilisateur: "administrateur",
          actif: true,
          date_creation: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        }
      ])
      .select()
      .single();

    if (error) {
      if (error.code === '42501') {
        console.log('‚ùå ERREUR: Permission refus√©e pour le sch√©ma public');
        console.log('');
        console.log('üîß SOLUTION: Vous devez configurer les politiques de s√©curit√© dans Supabase:');
        console.log('');
        console.log('1. Allez dans votre tableau de bord Supabase');
        console.log('2. Cliquez sur "SQL Editor"');
        console.log('3. Ex√©cutez le script suivant:');
        console.log('');
        console.log('-- D√©sactiver temporairement RLS pour permettre l\'insertion');
        console.log('ALTER TABLE public.utilisateur DISABLE ROW LEVEL SECURITY;');
        console.log('');
        console.log('-- Ou cr√©er des politiques plus permissives:');
        console.log('CREATE POLICY "Permettre insertion pour anon" ON public.utilisateur');
        console.log('FOR INSERT TO anon WITH CHECK (true);');
        console.log('');
        console.log('CREATE POLICY "Permettre lecture pour anon" ON public.utilisateur');
        console.log('FOR SELECT TO anon USING (true);');
        console.log('');
        console.log('4. Puis r√©ex√©cutez ce script');
        return;
      }

      if (error.code === '23505') {
        console.log('‚úÖ Utilisateur existe d√©j√† (conflit d\'email)');
        console.log('üìß Email:', email);
        console.log('üîë Mot de passe:', password);
        return;
      }

      console.error('‚ùå Erreur lors de la cr√©ation:', error);
      return;
    }

    console.log('‚úÖ Utilisateur de test cr√©√© avec succ√®s!');
    console.log('üìß Email:', email);
    console.log('üîë Mot de passe:', password);
    console.log('üÜî ID:', data.id);
    console.log('');
    console.log('üöÄ Vous pouvez maintenant vous connecter √† l\'application!');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
    console.log('');
    console.log('üí° Suggestions:');
    console.log('1. V√©rifiez que Supabase est accessible');
    console.log('2. V√©rifiez les cl√©s API dans le script');
    console.log('3. Configurez les politiques RLS dans Supabase');
  }
}

createTestUser();