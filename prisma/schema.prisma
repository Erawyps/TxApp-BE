generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model charge {
  charge_id            Int            @id @default(autoincrement())
  feuille_id           Int?
  chauffeur_id         Int
  vehicule_id          Int
  description          String         @db.VarChar(255)
  montant              Decimal        @db.Decimal(10, 2)
  mode_paiement_charge Int
  date_charge          DateTime?      @default(dbgenerated("CURRENT_DATE")) @db.Date
  created_at           DateTime?      @default(now()) @db.Timestamp(6)
  chauffeur            chauffeur      @relation(fields: [chauffeur_id], references: [chauffeur_id], onUpdate: NoAction)
  feuille_route        feuille_route? @relation(fields: [feuille_id], references: [feuille_id], onUpdate: NoAction)
  mode_paiement        mode_paiement  @relation(fields: [mode_paiement_charge], references: [mode_id], onUpdate: NoAction)
  vehicule             vehicule       @relation(fields: [vehicule_id], references: [vehicule_id], onUpdate: NoAction)

  @@index([chauffeur_id], map: "idx_charge_chauffeur")
  @@index([date_charge], map: "idx_charge_date")
}

model chauffeur {
  chauffeur_id            Int             @id
  societe_id              Int
  statut                  statut_actif?   @default(Actif)
  regle_salaire_defaut_id Int?
  created_at              DateTime?       @default(now()) @db.Timestamp(6)
  charge                  charge[]
  utilisateur             utilisateur     @relation(fields: [chauffeur_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  regle_salaire           regle_salaire?  @relation(fields: [regle_salaire_defaut_id], references: [regle_id], onDelete: NoAction, onUpdate: NoAction)
  societe_taxi            societe_taxi    @relation(fields: [societe_id], references: [societe_id], onDelete: Cascade, onUpdate: NoAction)
  feuille_route           feuille_route[]
  intervention            intervention[]
}

model client {
  client_id            Int               @id @default(autoincrement())
  societe_id           Int
  nom_societe          String            @db.VarChar(100)
  num_tva              String?           @db.VarChar(20)
  adresse              String?
  telephone            String?           @db.VarChar(20)
  email                String?           @db.VarChar(100)
  regle_facturation_id Int
  est_actif            Boolean?          @default(true)
  created_at           DateTime?         @default(now()) @db.Timestamp(6)
  regle_facturation    regle_facturation @relation(fields: [regle_facturation_id], references: [regle_facturation_id], onDelete: NoAction, onUpdate: NoAction)
  societe_taxi         societe_taxi      @relation(fields: [societe_id], references: [societe_id], onDelete: Cascade, onUpdate: NoAction)
  course               course[]
  gestion_facture      gestion_facture[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model course {
  course_id               Int                      @id @default(autoincrement())
  feuille_id              Int
  num_ordre               Int
  index_depart            Int?
  index_embarquement      Int
  lieu_embarquement       String?                  @db.VarChar(255)
  heure_embarquement      DateTime?                @db.Time(6)
  index_debarquement      Int
  lieu_debarquement       String?                  @db.VarChar(255)
  heure_debarquement      DateTime?                @db.Time(6)
  prix_taximetre          Decimal?                 @db.Decimal(10, 2)
  sommes_percues          Decimal                  @db.Decimal(10, 2)
  mode_paiement_id        Int
  client_id               Int?
  est_hors_heures         Boolean?                 @default(false)
  created_at              DateTime?                @default(now()) @db.Timestamp(6)
  client                  client?                  @relation(fields: [client_id], references: [client_id], onDelete: Restrict, onUpdate: NoAction)
  feuille_route           feuille_route            @relation(fields: [feuille_id], references: [feuille_id], onDelete: Cascade, onUpdate: NoAction)
  mode_paiement           mode_paiement            @relation(fields: [mode_paiement_id], references: [mode_id], onUpdate: NoAction)
  detail_facture_complexe detail_facture_complexe?

  @@unique([feuille_id, num_ordre])
  @@index([client_id], map: "idx_course_client")
  @@index([feuille_id], map: "idx_course_feuille")
}

model detail_facture_complexe {
  course_id     Int       @id
  num_bon       String?   @db.VarChar(50)
  trajet_detail String?   @db.VarChar(255)
  raison_course String?
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  course        course    @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model feuille_route {
  feuille_id                   Int          @id @default(autoincrement())
  chauffeur_id                 Int
  vehicule_id                  Int
  date_service                 DateTime     @db.Date
  mode_encodage                String       @db.VarChar(10)
  heure_debut                  DateTime?    @db.Time(6)
  heure_fin                    DateTime?    @db.Time(6)
  interruptions                String?
  index_km_debut_tdb           Int
  index_km_fin_tdb             Int?
  km_tableau_bord_debut        Int?
  km_tableau_bord_fin          Int?
  montant_salaire_cash_declare Decimal?     @default(0.00) @db.Decimal(10, 2)
  est_validee                  Boolean?     @default(false)
  date_validation              DateTime?    @db.Timestamp(6)
  validated_by                 Int?
  signature_chauffeur          String?      @db.VarChar(255)
  created_at                   DateTime?    @default(now()) @db.Timestamp(6)
  charge                       charge[]
  course                       course[]
  chauffeur                    chauffeur    @relation(fields: [chauffeur_id], references: [chauffeur_id], onUpdate: NoAction)
  utilisateur                  utilisateur? @relation(fields: [validated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  vehicule                     vehicule     @relation(fields: [vehicule_id], references: [vehicule_id], onUpdate: NoAction)
  taximetre                    taximetre?

  @@index([chauffeur_id], map: "idx_feuille_route_chauffeur")
  @@index([date_service], map: "idx_feuille_route_date")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model gestion_facture {
  facture_id       Int            @id @default(autoincrement())
  client_id        Int
  numero_facture   String         @unique @db.VarChar(50)
  date_emission    DateTime       @db.Date
  date_echeance    DateTime?      @db.Date
  montant_total    Decimal        @db.Decimal(10, 2)
  montant_tva      Decimal?       @default(0) @db.Decimal(10, 2)
  est_payee        Boolean?       @default(false)
  date_paiement    DateTime?      @db.Date
  mode_paiement_id Int?
  notes            String?
  created_at       DateTime?      @default(now()) @db.Timestamp(6)
  client           client         @relation(fields: [client_id], references: [client_id], onUpdate: NoAction)
  mode_paiement    mode_paiement? @relation(fields: [mode_paiement_id], references: [mode_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([client_id], map: "idx_facture_client")
  @@index([date_emission], map: "idx_facture_date")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model liaison_partenaire {
  liaison_id           Int          @id @default(autoincrement())
  societe_emettrice_id Int
  partenaire_id        Int
  type_transaction     String       @db.VarChar(20)
  montant              Decimal      @db.Decimal(10, 2)
  description          String?
  date_transaction     DateTime?    @default(dbgenerated("CURRENT_DATE")) @db.Date
  reference            String?      @db.VarChar(50)
  created_at           DateTime?    @default(now()) @db.Timestamp(6)
  partenaire           partenaire   @relation(fields: [partenaire_id], references: [partenaire_id], onUpdate: NoAction)
  societe_taxi         societe_taxi @relation(fields: [societe_emettrice_id], references: [societe_id], onDelete: Cascade, onUpdate: NoAction)
}

model mode_paiement {
  mode_id         Int               @id @default(autoincrement())
  code            String            @unique @db.VarChar(20)
  libelle         String            @db.VarChar(100)
  type            type_paiement
  est_actif       Boolean?          @default(true)
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  charge          charge[]
  course          course[]
  gestion_facture gestion_facture[]
}

model partenaire {
  partenaire_id      Int                  @id @default(autoincrement())
  societe_id         Int
  nom_societe        String               @db.VarChar(100)
  adresse            String?
  telephone          String?              @db.VarChar(20)
  email              String?              @db.VarChar(100)
  num_tva            String?              @db.VarChar(20)
  est_actif          Boolean?             @default(true)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  liaison_partenaire liaison_partenaire[]
  societe_taxi       societe_taxi         @relation(fields: [societe_id], references: [societe_id], onDelete: Cascade, onUpdate: NoAction)
}

model regle_facturation {
  regle_facturation_id Int                   @id @default(autoincrement())
  nom                  regle_facturation_nom @unique
  description          String?
  created_at           DateTime?             @default(now()) @db.Timestamp(6)
  client               client[]
}

model regle_salaire {
  regle_id            Int         @id @default(autoincrement())
  nom_regle           String      @db.VarChar(50)
  est_variable        Boolean?    @default(true)
  seuil_recette       Decimal?    @db.Decimal(10, 2)
  pourcentage_base    Decimal?    @db.Decimal(4, 2)
  pourcentage_au_dela Decimal?    @db.Decimal(4, 2)
  description         String?
  created_at          DateTime?   @default(now()) @db.Timestamp(6)
  chauffeur           chauffeur[]
}

model societe_taxi {
  societe_id         Int                  @id @default(autoincrement())
  nom_exploitant     String               @db.VarChar(100)
  num_tva            String               @db.VarChar(20)
  taux_tva_defaut    Decimal?             @default(6.00) @db.Decimal(4, 2)
  montant_inclut_tva Boolean?             @default(true)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @default(now()) @db.Timestamp(6)
  chauffeur          chauffeur[]
  client             client[]
  liaison_partenaire liaison_partenaire[]
  partenaire         partenaire[]
  utilisateur        utilisateur[]
  vehicule           vehicule[]
}

model taximetre {
  feuille_id Int @id
  
  // Anciennes colonnes (à supprimer après migration)
  pc_debut_tax       Decimal? @db.Decimal(10, 2)
  pc_fin_tax         Decimal? @db.Decimal(10, 2)
  index_km_debut_tax Int?
  index_km_fin_tax   Int?
  km_charge_debut    Decimal? @db.Decimal(10, 2)
  km_charge_fin      Decimal? @db.Decimal(10, 2)
  chutes_debut_tax   Decimal? @db.Decimal(10, 2)
  chutes_fin_tax     Decimal? @db.Decimal(10, 2)
  
  // Nouvelles colonnes (avec préfixe)
  taximetre_prise_charge_debut Decimal? @db.Decimal(10, 2)
  taximetre_prise_charge_fin   Decimal? @db.Decimal(10, 2)
  taximetre_index_km_debut     Int?
  taximetre_index_km_fin       Int?
  taximetre_km_charge_debut    Decimal? @db.Decimal(10, 2)
  taximetre_km_charge_fin      Decimal? @db.Decimal(10, 2)
  taximetre_chutes_debut       Decimal? @db.Decimal(10, 2)
  taximetre_chutes_fin         Decimal? @db.Decimal(10, 2)
  
  created_at                   DateTime? @default(now()) @db.Timestamp(6)
  
  // Relations
  feuille_route                feuille_route @relation(fields: [feuille_id], references: [feuille_id], onDelete: Cascade, onUpdate: NoAction)
}

model utilisateur {
  user_id            Int             @id @default(autoincrement())
  societe_id         Int
  email              String          @unique @db.VarChar(100)
  mot_de_passe_hashe String          @db.VarChar(255)
  nom                String          @db.VarChar(50)
  prenom             String          @db.VarChar(50)
  role               role_type
  created_at         DateTime?       @default(now()) @db.Timestamp(6)
  updated_at         DateTime?       @default(now()) @db.Timestamp(6)
  chauffeur          chauffeur?
  feuille_route      feuille_route[]
  societe_taxi       societe_taxi    @relation(fields: [societe_id], references: [societe_id], onDelete: Cascade, onUpdate: NoAction)
}

model vehicule {
  vehicule_id            Int             @id @default(autoincrement())
  societe_id             Int
  plaque_immatriculation String          @unique @db.VarChar(20)
  num_identification     String          @db.VarChar(20)
  marque                 String?         @db.VarChar(50)
  modele                 String?         @db.VarChar(50)
  annee                  Int?
  est_actif              Boolean?        @default(true)
  created_at             DateTime?       @default(now()) @db.Timestamp(6)
  charge                 charge[]
  feuille_route          feuille_route[]
  societe_taxi           societe_taxi    @relation(fields: [societe_id], references: [societe_id], onDelete: Cascade, onUpdate: NoAction)
}

model intervention {
  intervention_id Int       @id @default(autoincrement())
  chauffeur_id    Int
  type            String    @db.VarChar(50)
  description     String
  date            DateTime  @db.Date
  location        String?   @db.VarChar(255)
  created_by      String    @db.VarChar(100)
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  chauffeur       chauffeur @relation(fields: [chauffeur_id], references: [chauffeur_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([chauffeur_id], map: "idx_intervention_chauffeur")
  @@index([date], map: "idx_intervention_date")
}

enum regle_facturation_nom {
  Simple
  Justifie
  Complet
  Facture_Bon_InfoCourse
}

enum role_type {
  Admin
  Controleur
  Chauffeur
  Driver
}

enum statut_actif {
  Actif
  Non_Actif @map("Non Actif")
}

enum type_paiement {
  Cash
  Bancontact
  Virement
  Facture
  Avance
  Demande
  Cheque
}
